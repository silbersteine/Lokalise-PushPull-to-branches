name: Push to Lokalise
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PREVIOUS_COMMIT: ${{ github.event.after }}
      GITHUB_CURRENT_COMMIT: ${{ github.event.before }}
      VAR_LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      VAR_LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      VAR_LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
      VAR_LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
      VAR_GIT_DEFAULT_BRANCH: ${{ vars.GIT_DEFAULT_BRANCH }}
      VAR_GIT_UPSTREAM_BRANCH: ${{ vars.GIT_UPSTREAM_BRANCH }}

    steps:
      # Checkout the repository to the GitHub runner
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history of the repository to ensure all commits are available
      
      # Store Git Branch Name 
      - name: Get Git Branch Name
        run: |
          GIT_BRANCH="${{ github.ref_name }}"
          echo "$GIT_BRANCH" > git_branch.txt
          echo "The Git branch triggering this download is $GIT_BRANCH"

      # Check if Triggering Branch is Default Branch
      - name: Check if Triggering Branch is Git Default Branch
        run: |
          GIT_BRANCH=$(cat git_branch.txt)
          if [ "$GIT_BRANCH" = "${{ env.VAR_GIT_DEFAULT_BRANCH }}" ]; then
            echo "The Git default branch triggered this workflow."
            LOKALISE_BRANCH="master"
            echo "$LOKALISE_BRANCH" > lokalise_branch.txt
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
          else
            echo "A Git feature branch triggered this workflow."
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
          fi

      # Download and install the Lokalise CLI tool
      - name: Install Lokalise CLI
        run: curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh


      # Check for changed and new files in Git
      - name: Get all changed files between branches
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false  
        run: |
          # Initialize the changed_files.txt file
          > changed_files.txt
          # Fetch the upstream branch
            git fetch origin ${{ vars.GIT_UPSTREAM_BRANCH }}:${{ github.ref_name }}-upstream
          # Fetch the current branch
            git fetch origin ${{ github.ref_name }}:${{ github.ref_name }}-current
            echo "Changed localization files between ${{ vars.GIT_UPSTREAM_BRANCH }} and ${{ github.ref_name }}:"
            git diff --name-only ${{ github.ref_name }}-upstream...${{ github.ref_name }}-current -- '${{ vars.LOKALISE_TRANSLATIONS_PATH }}/${{ vars.LOKALISE_SOURCE_LANG }}/**' | tee -a changed_files.txt
          
      # Debug read contents of changed_files.txt
      - name: Debug - changed_files.txt
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false 
        run: |
          echo "Contents of changed_files.txt:"
          cat changed_files.txt


      # Lokalise Branching
      - name: List Lokalise Branches
        id: lokalise_branches
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false 
        run: |
          LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
          --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}" \
          branch list | jq -r '.branches[].name')
          
          echo -e "Lokalise branches:\n$LOKALISE_BRANCHES"
          echo "$LOKALISE_BRANCHES" > lokalise_branches.txt
        

      # Compare Lokalise Branch names to Git Triggering Branch
      - name: Compare Lokalise Branch names to Git Triggering Branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false 
        run: |
          GIT_BRANCH_NAME="${{ github.ref_name }}"
          LOKALISE_BRANCHES=$(cat lokalise_branches.txt)  # Read the contents of the file into the LOKALISE_BRANCHES variable

          if echo "$LOKALISE_BRANCHES" | grep -qw "$GIT_BRANCH_NAME"; then
            echo "Branch $GIT_BRANCH_NAME exists in Lokalise. Continuing on Lokalise branch."
            LOKALISE_BRANCH="$GIT_BRANCH_NAME"
            echo "$LOKALISE_BRANCH" > lokalise_branch.txt
          else
            echo "Branch $GIT_BRANCH_NAME does not exist in Lokalise. Will create a branch in Lokalise."
            LOKALISE_BRANCH="$GIT_BRANCH_NAME"
            echo "$LOKALISE_BRANCH" > lokalise_branch.txt
          fi

      # Debug LOKALISE_BRANCH 
      - name: Debug LOKALISE_BRANCH
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false 
        run: |
          echo "Value of LOKALISE_BRANCH:"
          if [ -f lokalise_branch.txt ]; then
            LOKALISE_BRANCH=$(cat lokalise_branch.txt)
            echo "$LOKALISE_BRANCH"
          else
            echo "lokalise_branch.txt not found."
          fi

      # Create a new branch in Lokalise if it doesn't exist
      - name: Create Lokalise Branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false  
        run: |
          # Fetch the branch name from lokalise_branch.txt
          LOKALISE_BRANCH=$(cat lokalise_branch.txt)

          # Create a new branch in Lokalise using the fetched branch name and capture the HTTP response
          ./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
          --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}" \
          branch create \
          --name "$LOKALISE_BRANCH"

          # Check if the API response contains a 200 status
          HTTP_STATUS=$(echo "$RESPONSE" | jq -r '.status_code')
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: Failed to create branch in Lokalise. HTTP Status: $HTTP_STATUS"
            exit 1
          else
            echo "Branch created successfully in Lokalise. HTTP Status: $HTTP_STATUS"
          fi

      # Push changed files to Lokalise Branch
      - name: Push files to Lokalise Branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false  
        run: | 
          # Fetch the branch name from lokalise_branch.txt
          LOKALISE_BRANCH=$(cat lokalise_branch.txt)
          echo "Seind files to Lokalise branch: $LOKALISE_BRANCH"
          
          # Read changed files from changed_files.txt
          if [ -f changed_files.txt ]; then
            changed_files=$(cat changed_files.txt | grep -E '^pub/locales/en/.*\.json$')
          else
            echo "No changed_files.txt file found. Exiting."
            exit 1
          fi
            
          echo "Changed files to push to Lokalise:"
          echo "$changed_files"
        
          # Loop through each changed file and upload it to Lokalise
          for file in $changed_files; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Lokalise..."
              ./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
              --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}:$LOKALISE_BRANCH" \
              file upload \
              --file="$file" \
              --lang-iso="${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}" \
              --replace-modified \
              --include-path \
              --distinguish-by-file \
              --poll \
              --poll-timeout=120s \
              --tag-inserted-keys \
              --tag-skipped-keys=true \
              --tag-updated-keys \
              --tags ${{ github.ref_name }}
            else
              echo "File $file does not exist."
            fi
          done


      # Push all localization files to Lokalise Master
      - name: Push all localization files to Lokalise Master
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}  # Only run if IS_DEFAULT_BRANCH is true  
        run: |
          # Fetch the branch name from lokalise_branch.txt
          LOKALISE_BRANCH=$(cat lokalise_branch.txt)
          echo "Fetched Lokalise branch name: $LOKALISE_BRANCH"
          
          # Find all relevant localization files
          localization_files=$(find ${{ env.VAR_LOKALISE_FOLDER_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/ -name "*.json")
          
          echo "Localization files to push to Lokalise:"
          echo "$localization_files"
        
          # Loop through each localization file and upload it to Lokalise
          for file in $localization_files; do
            if [ -f "$file" ]; then
              echo "Uploading $file to Lokalise..."
              ./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
              --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}:$LOKALISE_BRANCH" \
              file upload \
              --file="$file" \
              --lang-iso="${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}" \
              --use-automations=true \
              --replace-modified \
              --include-path \
              --distinguish-by-file \
              --poll \
              --poll-timeout=120s \
              --tag-inserted-keys \
              --tag-skipped-keys=true \
              --tag-updated-keys \
              --tags ${{ github.ref_name }}
            else
              echo "File $file does not exist."
            fi
          done