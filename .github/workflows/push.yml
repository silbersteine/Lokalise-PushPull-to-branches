name: Push to Lokalise
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PREVIOUS_COMMIT: ${{ github.event.after }}
      GITHUB_CURRENT_COMMIT: ${{ github.event.before }}
      VAR_LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      VAR_LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      VAR_LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
      VAR_LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
      VAR_GIT_DEFAULT_BRANCH: ${{ vars.GIT_DEFAULT_BRANCH }}
      VAR_GIT_UPSTREAM_BRANCH: ${{ vars.GIT_UPSTREAM_BRANCH }}

    steps:
      # Checkout the repository to the GitHub runner
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history of the repository to ensure all commits are available

      # Download and install the Lokalise CLI tool
      - name: Install Lokalise CLI
        run: curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh

      # Check for changed and new files in Git
      - name: Get all changed files between branches
        run: |
          # Fetch the upstream branch
          git fetch origin ${{ vars.GIT_UPSTREAM_BRANCH }}:${{ github.ref_name }}-upstream
          
          # Fetch the current branch
          git fetch origin ${{ github.ref_name }}:${{ github.ref_name }}-current
          
          # Initialize the changed_files.txt file
          > changed_files.txt

          # List all changed files between the two branches
          echo "Changed files between ${{ vars.GIT_UPSTREAM_BRANCH }} and ${{ github.ref_name }}:"
          git diff --name-only ${{ github.ref_name }}-upstream...${{ github.ref_name }}-current -- 'pub/locales/en/**' >> changed_files.txt
      
          # List all new files in the current branch that do not exist in the upstream branch
          echo "New files in ${{ github.ref_name }} branch:"
          git diff --name-only --diff-filter=A ${{ github.ref_name }}-upstream...${{ github.ref_name }}-current -- 'pub/locales/en/**' >> changed_files.txt

      # Debug read contents of changed_files.txt
      - name: Debug - changed_files.txt
        run: |
          echo "Contents of changed_files.txt:"
          cat changed_files.txt

      # Lokalise Branching
      - name: List Lokalise Branches
        id: lokalise_branches
        run: |
          LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
          --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}" \
          branch list | jq -r '.branches[].name')
          
          echo -e "Lokalise branches:\n$LOKALISE_BRANCHES"
          echo "$LOKALISE_BRANCHES" > lokalise_branches.txt
        
      # Debug step to read the contents of lokalise_branches.txt
      - name: Debug - Show Lokalise Branches
        run: |
          GIT_BRANCH_NAME="${{ github.ref_name }}"
          echo "Contents of lokalise_branches.txt:"
          cat lokalise_branches.txt
          echo GIT_BRANCH_NAME = "$GIT_BRANCH_NAME"
          echo env.VAR_GIT_DEFAULT_BRANCH = ${{ env.VAR_GIT_DEFAULT_BRANCH }}
          echo VAR_GIT_DEFAULT_BRANCH ="$VAR_GIT_DEFAULT_BRANCH"
          echo vars.VAR_GIT_DEFAULT_BRANCH = ${{ vars.GIT_DEFAULT_BRANCH }}

      # Compare Lokalise Branch names to Git Triggering Branch
      - name: Compare Lokalise Branch names to Git Triggering Branch
        run: |
          GIT_BRANCH_NAME="${{ github.ref_name }}"
          LOKALISE_BRANCHES=$(cat lokalise_branches.txt)  # Read the contents of the file into the LOKALISE_BRANCHES variable
            
          if [ "$GIT_BRANCH_NAME" = "${{ env.VAR_GIT_DEFAULT_BRANCH }}" ]; then
            echo "Your default branch in Lokalise is Master and default GIT branch name is $VAR_GIT_DEFAULT_BRANCH. Master/main exists in Lokalise. Continuing on Lokalise Master"
            echo LOKALISE_BRANCH="${{ env.VAR_GIT_DEFAULT_BRANCH }}"
            echo "${{ env.VAR_GIT_DEFAULT_BRANCH }}" > lokalise_branch.txt

          elif echo "$LOKALISE_BRANCHES" | grep -qw "$GIT_BRANCH_NAME"; then
            echo "Branch $GIT_BRANCH_NAME exists in Lokalise. Continuing on Lokalise branch."
            echo LOKALISE_BRANCH="$GIT_BRANCH_NAME"
            echo "$GIT_BRANCH_NAME" > lokalise_branch.txt
            
          else
            echo "Branch $GIT_BRANCH_NAME does not exist in Lokalise. Will create a branch in Lokalise."
            echo LOKALISE_BRANCH="$GIT_BRANCH_NAME"
            echo "$GIT_BRANCH_NAME" > lokalise_branch.txt
            echo "branch_exists=false" >> $GITHUB_ENV
          fi

      # Debug read contents of lokalise_branch.txt
      - name: Debug - Show Lokalise Branch
        run: |
          echo "Contents of lokalise_branch.txt:"
          cat lokalise_branch.txt

      # Create a new branch in Lokalise if it doesn't exist
      - name: Create Lokalise Branch
        if: env.branch_exists == 'false'
        run: |
          # Fetch the branch name from lokalise_branch.txt
          LOKALISE_BRANCH=$(cat lokalise_branch.txt)

          # Create a new branch in Lokalise using the fetched branch name and capture the HTTP response
          ./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
          --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}" \
          branch create \
          --name "$LOKALISE_BRANCH"

          # Check if the API response contains a 200 status
          HTTP_STATUS=$(echo "$RESPONSE" | jq -r '.status_code')
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "Error: Failed to create branch in Lokalise. HTTP Status: $HTTP_STATUS"
            exit 1
          else
            echo "Branch created successfully in Lokalise. HTTP Status: $HTTP_STATUS"
          fi

      # Fetch the list of all changed files between github.ref_name and origin
      - name: Get all changed files
        run: |
            git fetch origin main:${{ github.ref_name }}-main  # Fetch the main branch
            git fetch origin ${{ github.ref_name }}:${{ github.ref_name }}-current  # Fetch the current branch
            git diff --name-only ${{ github.ref_name }}-main...${{ github.ref_name }}-current  # List all changed files


