name: Download Localization Files
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PREVIOUS_COMMIT: ${{ github.event.after }}
      GITHUB_CURRENT_COMMIT: ${{ github.event.before }}
      VAR_LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      VAR_LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      VAR_LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
      VAR_LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
      VAR_GIT_DEFAULT_BRANCH: ${{ vars.GIT_DEFAULT_BRANCH }}
      VAR_GIT_UPSTREAM_BRANCH: ${{ vars.GIT_UPSTREAM_BRANCH }}
      VAR_GIT_LOCALIZATION_BRANCH_MARKER: ${{ vars.GIT_LOCALIZATION_BRANCH_MARKER }}

    steps:
      # Checkout the repository to the GitHub runner
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history of the repository to ensure all commits are available


      # Download and install the Lokalise CLI tool
      - name: Install Lokalise CLI
        run: curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh

      # Store Git Branch Name 
      - name: Get Git Branch Name 
        run: |
          GIT_BRANCH_NAME="${{ github.ref_name }}"
          echo "$GIT_BRANCH_NAME" > branch.txt
          echo "The Git branch triggering this download is $GIT_BRANCH_NAME"
      
      # Check if Triggering Branch is Default Branch
      - name: Check if Triggering Branch is Git Default Branch
        run: |
          GIT_BRANCH_NAME=$(cat branch.txt)
          if [ "$GIT_BRANCH_NAME" = "${{ env.VAR_GIT_DEFAULT_BRANCH }}" ]; then
            echo "The Git default branch triggered this workflow."
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
          else
            echo "A Git feature branch triggered this workflow."
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
          fi

      # Debug read IS_DEFAULT_BRANCH value
      - name: Debug - IS_DEFAULT_BRANCH
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}  # Only run if IS_DEFAULT_BRANCH is true
        run: |
          echo "IS_DEFAULT_BRANCH=$IS_DEFAULT_BRANCH"

      # Assign Lokalise Branch of master for workflow use
      - name: Assign Lokalise Branch of master for workflow use
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}  # Only run if IS_DEFAULT_BRANCH is true
        run: |
            echo "Branch $GIT_BRANCH_NAME is the default branch."
            echo "master" > lokalise_branch.txt
      
      # Debug read contents of lokalise_branch.txt
      - name: Debug - lokalise_branch.txt
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' }}  # Only run if IS_DEFAULT_BRANCH is true
        run: |
          echo "Contents of lokalise_branch.txt:"
          cat lokalise_branch.txt


      # List Lokalise Branches and save localization branch name
      - name: List Lokalise Branches and save localization branch name
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false
        id: lokalise_branches
        run: |
          LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
          --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}" \
          branch list | jq -r '.branches[].name')
          
          echo -e "Lokalise branches:\n$LOKALISE_BRANCHES"
          echo "$LOKALISE_BRANCHES" > lokalise_branches.txt

      # Debug read contents of lokalise_branches.txt
      - name: Debug - lokalise_branches.txt
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false
        run: |
          echo "Contents of lokalise_branches.txt:"
          cat lokalise_branches.txt

      # Compare Lokalise Branch names to Git Triggering Branch, store branch name and Cancel Workflow if Branch Does Not Exist
      - name: Compare Lokalise Branch names to Git Triggering Branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false
        run: |
          GIT_BRANCH_NAME=$(cat branch.txt)
          LOKALISE_BRANCHES=$(cat lokalise_branches.txt)

          if echo "$LOKALISE_BRANCHES" | grep -q "^$GIT_BRANCH_NAME$"; then
            echo "Branch $GIT_BRANCH_NAME exists in Lokalise."
            echo "$GIT_BRANCH_NAME" > lokalise_branch.txt
          else
            echo "Branch $GIT_BRANCH_NAME does not exist in Lokalise."
            echo "Cancelling the workflow."
            exit 1  # This will stop the workflow with an error
          fi

      # Debug read contents of lokalise_branch.txt
      - name: Debug - lokalise_branch.txt
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}  # Only run if IS_DEFAULT_BRANCH is false
        run: |
          echo "Contents of lokalise_branch.txt:"
          cat lokalise_branch.txt

      # Create l10n_Branch or Check Out Existing Branch
      - name: Create or Checkout l10n_Branch
        run: |
          SHORT_SHA=${GITHUB_SHA::6}
          GIT_BRANCH_NAME=$(cat branch.txt)
          GIT_LOCALIZATION_BRANCH_NAME="${{ env.VAR_GIT_LOCALIZATION_BRANCH_MARKER }}_${GIT_BRANCH_NAME}_${SHORT_SHA}"
          echo "$GIT_LOCALIZATION_BRANCH_NAME" > git_localization_branch.txt

          # Check if the branch already exists
          if git show-ref --quiet refs/heads/"$GIT_LOCALIZATION_BRANCH_NAME"; then
            echo "Git Branch $GIT_LOCALIZATION_BRANCH_NAME already exists. Checking out the branch."
            git checkout "$GIT_LOCALIZATION_BRANCH_NAME"
          else
            echo "Branch $GIT_LOCALIZATION_BRANCH_NAME does not exist. Creating and checking out the branch."
            git checkout -b "$GIT_LOCALIZATION_BRANCH_NAME"
          fi

      # Debug - read contents of git_localization_branch.txt
      - name: Debug - git_localization_branch.txt
        run: |
          echo "Contents of git_localization_branch.txt"
          cat git_localization_branch.txt

       # Pull localization files from Lokalise
      - name: Pull localization files from Lokalise
        run: |
         LOKALISE_BRANCH=$(cat lokalise_branch.txt)
         ./bin/lokalise2 --token="${{ env.VAR_LOKALISE_API_TOKEN }}" \
                         --project-id="${{ env.VAR_LOKALISE_PROJECT_ID }}:$LOKALISE_BRANCH" \
                         file download \
                         --format json \
                         --original-filenames=true \
                         --directory-prefix="/" \
                         --export-sort a_z \
                         --export-empty-as base \
                         --include-tags=${{ github.ref_name }}

      # Commit changes with debugging
      - name: Commit to localization branch
        run: |
          GIT_LOCALIZATION_BRANCH_NAME=$(cat git_localization_branch.txt)
          # Debug: Check contents of git_localization_branch.txt
          echo "Debug: Contents of git_localization_branch.txt:"
          echo "GIT_LOCALIZATION_BRANCH_NAME: $GIT_LOCALIZATION_BRANCH_NAME"
          cat git_localization_branch.txt || { echo "Error: git_localization_branch.txt not found"; exit 1; }

          echo "Git status before adding files:"
          git status

          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          echo "Adding files to staging area:"
          git add ./${{ vars.LOKALISE_TRANSLATION_PATH }}/**/*.json -- ':!${{ vars.LOKALISE_TRANSLATION_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/*.json'

          echo "Git status after adding files:"
          git status

          if [[ -z $(git status --untracked-files=no --porcelain) ]]; then
            echo "No changes to commit"
          else
            echo "Committing changes"
            git commit -m 'Translations update'
            
            echo "Git log after commit:"
            git log -1

            echo "Pushing changes to remote repository"
            git push origin "$GIT_LOCALIZATION_BRANCH_NAME"
          fi

      # Open pull request on triggering Git branch
      - name: Create Pull Request
        run: |
            GIT_BRANCH_NAME=$(cat branch.txt)
            GIT_LOCALIZATION_BRANCH_NAME=$(cat git_localization_branch.txt)
            echo "Git status before creating PR:"
            git status

            # Print details of uncommitted changes
            echo "Uncommitted changes:"
            git diff --name-only  # Show modified files not yet staged
            git diff --cached --name-only  # Show staged files

            # Ensure git configuration is correct
            git config --global user.name "${GITHUB_ACTOR}"
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

            # Create the pull request
            echo "Creating Pull Request..."
            gh pr create --base "$GIT_BRANCH_NAME" \
                        --head "$GIT_LOCALIZATION_BRANCH_NAME" \
                        --title "Lokalise translations update" \
                        --body ""

            echo "Pull Request created successfully."

          